pipeline {
  agent any

  environment {
    GIT_TOKEN = credentials('Cred-GitHub_Webhook_motorfireman')
    PUBLIC_JENKINS_URL_PORT = "ict2216g3.ddns.net:8080"
    SSH_USERNAME = "student11"
    SSH_HOST = "172.50.51.1"
  }

  stages {
    stage('Checkout SCM') {
      steps {
        withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
          string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
            sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: GitHub Commit Detected, Starting Jenkins CI/CD Process."'
        }
        git branch: 'main',
          credentialsId: 'Cred-GitHub_PAT_motorfireman',
          url: 'https://github.com/motorfireman/HairyPotterGroup3SSD.git'
      }
    }

    stage('OWASP DependencyCheck') {
      steps {
        withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
          string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
            sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: OWASP DependencyCheck."'
        }
        withCredentials([string(credentialsId: 'Cred-NVD_API_Key', variable: 'NVD_API_KEY')]) {
          dependencyCheck additionalArguments: "-o './' -s './' -f 'ALL' --prettyPrint --nvdApiKey ${env.NVD_API_KEY}", odcInstallation: 'OWASP Dependency-Check Vulnerabilities'
            dependencyCheckPublisher pattern: 'dependency-check-report.xml'
        }
      }
    }

/*
NOT IN USE
    stage('Code Quality Check via SonarQube') {
      steps {
        withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
          string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
            sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: Code Quality Check via SonarQube."'
        }
        script {
          def scannerHome = tool 'SonarQube';
            withSonarQubeEnv('SonarQube') {
            sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=OWASP -Dsonar.sources=."
          }
        }
      }
    }
*/

    stage('Restore packages'){
      steps{
        sh 'dotnet restore ./Ecommerce_NetCore7_v1.1.1/source-code/Ecommerce/Ecommerce.sln'
      }
    }

    stage('Clean'){
      steps{
        sh 'dotnet clean ./Ecommerce_NetCore7_v1.1.1/source-code/Ecommerce/Ecommerce.sln --configuration Release'
      }
    }

    stage('BUILD') {
      steps {
        echo "Building ${JOB_NAME}:#${BUILD_NUMBER}"
        withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
          string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
            sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: Building."'
        }
        sh 'dotnet build ./Ecommerce_NetCore7_v1.1.1/source-code/Ecommerce/Ecommerce.sln --configuration Release --no-restore'
      }
    }

    stage('TEST') {
      steps {
        echo "Testing ${JOB_NAME}:#${BUILD_NUMBER}"
        withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
          string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
            sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: Testing."'
        }
        sh 'dotnet test ./Ecommerce_NetCore7_v1.1.1/source-code/Ecommerce/Ecommerce.Tests'
      }
    }

    stage("Deploy to Production Checkpoint") {
      steps {
        withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
          string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
            sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: Pending Approval to Deploy to Production. Please access https://${PUBLIC_JENKINS_URL_PORT}/job/${JOB_NAME}/${BUILD_NUMBER}/input and click on Proceed to approve."'
        }
        input "Should we deploy to production?"
      }
    }

    stage('DEPLOY') {
      steps {
        echo "Deploying ${JOB_NAME}:#${BUILD_NUMBER}"
        withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
          string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
            sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: Deploying."'
        }
        sshagent(credentials: ['Cred-SSH']) {
          sh """
          ssh -o StrictHostKeyChecking=no ${SSH_USERNAME}@${SSH_HOST} <<'END'
          #Install GitHub CLI
          sudo apt install -y gh

          #Login to GitHub
          sudo echo ${env.GIT_TOKEN} | gh auth login --with-token

          #Clone Updated Repo
          sudo rm -rf /home/student11/HairyPotterGroup3SSD
          sudo gh repo clone https://github.com/motorfireman/HairyPotterGroup3SSD.git /home/student11/HairyPotterGroup3SSD/

          #Add app.UseForwardedHeaders(); to Program.cs
          sudo sed -i 's/app.Run();/app.UseForwardedHeaders();\n\n\napp.Run();/g' /home/student11/HairyPotterGroup3SSD/Ecommerce_NetCore7_v1.1.1/source-code/Ecommerce/Ecommerce.Web.Mvc/Program.cs

          #Stop and Clean All Existing WebApp
          sudo docker stop webapp_container_1
          sudo docker stop webapp_container_2
          sudo docker system prune -af

          #Build the webapp
          sudo docker build -t webapp_image -f /home/student11/HairyPotterGroup3SSD/Dockerfile-ASPNET  /home/student11/HairyPotterGroup3SSD/Ecommerce_NetCore7_v1.1.1/source-code/Ecommerce/

          #Create Network for ASPNET and MSSQL
          sudo docker network create --driver=bridge --subnet=172.23.0.0/24 --ip-range=172.23.0.0/24 --gateway=172.23.0.1 web_net

          sudo docker compose -f /home/student11/HairyPotterGroup3SSD/docker-compose-ASPNET_MSSQL.yml down
          sudo docker compose -f /home/student11/HairyPotterGroup3SSD/docker-compose-ASPNET_MSSQL.yml up -d
          sudo docker system prune -af
          sudo rm -rf /home/student11/HairyPotterGroup3SSD
          """.stripIndent()
        }
      }
    }
  }
  post {
    success {
      echo "Successfully Deployed the Wep Application"
      withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
        string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
          sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: [âœ…] Deployed to production successfully ðŸ˜Š"'
      }
      dependencyCheckPublisher pattern: 'dependency-check-report.xml'
    }
  }
}

  post {
    success {
      echo "Successfully Deployed the Wep Application"
      withCredentials(([string(credentialsId: 'Cred-TelegramBot', variable: 'TOKEN'),
        string(credentialsId: 'Cred-TelegramChatID', variable: 'CHAT_ID')])) {
          sh 'curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage -d "chat_id=${CHAT_ID}" -d text="${JOB_NAME}:#${BUILD_NUMBER}: [âœ…] Deployed to production successfully ðŸ˜Š"'
      }
      dependencyCheckPublisher pattern: 'dependency-check-report.xml'
    }
  }
}
